{"version":3,"file":"static/js/894.c774623f.chunk.js","mappings":"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","sources":["features/todolists-management/model/todolists.selectors.ts","features/tasks-management/model/tasks.selectors.ts","entities/filter-tasks-buttons/ui/FilterTasksButtons.tsx","entities/todolist-title/ui/TodolistTitle.tsx","widgets/todolist/ui/Todolist.tsx","widgets/task-modal/ui/TaskModal.tsx","widgets/task-modal/lib/useTask.ts","entities/task/ui/Task.tsx","widgets/todolist/ui/tasks/Tasks.tsx","pages/main/index.tsx"],"sourcesContent":["import { TodolistDomainType } from 'features/todolists-management/model/todolists.slice';\nimport { AppRootStateType } from 'app/providers/store';\n\nexport const selectTodolists = (state: AppRootStateType): TodolistDomainType[] => state.todolists;\n\nexport const selectTodolistRemoving = (id: string) => (state: AppRootStateType) =>\n\tstate.todolists.find((list) => list.id === id)!.entityStatus === 'loading';\n","import { AppRootStateType } from 'app/providers/store';\n\nexport const selectTasks = (state: AppRootStateType) => state.tasks;\n","import { FilterValuesType, TodolistDomainType, todolistsActions } from 'features/todolists-management/model/todolists.slice';\nimport { useActions } from 'shared/hooks';\nimport { Button } from '@mui/material';\nimport React, { FC } from 'react';\n\ntype Props = {\n\ttodolist: TodolistDomainType;\n};\n\nexport const FilterTasksButtons: FC<Props> = ({ todolist }) => {\n\tconst { changeTodolistFilter } = useActions(todolistsActions);\n\n\tconst changeTasksFilterHandler = (filter: FilterValuesType) => () => {\n\t\tchangeTodolistFilter({ id: todolist.id, filter });\n\t};\n\n\tconst filterAllColor = todolist.filter === 'all' ? 'primary' : 'inherit';\n\tconst filterActiveColor = todolist.filter === 'active' ? 'error' : 'inherit';\n\tconst filterCompletedColor = todolist.filter === 'completed' ? 'success' : 'inherit';\n\n\treturn (\n\t\t<div className=\"filter-block\">\n\t\t\t<Button variant=\"contained\" size=\"small\" onClick={changeTasksFilterHandler('all')} color={filterAllColor}>\n\t\t\t\tAll\n\t\t\t</Button>\n\t\t\t<Button variant=\"contained\" size=\"small\" onClick={changeTasksFilterHandler('active')} color={filterActiveColor}>\n\t\t\t\tActive\n\t\t\t</Button>\n\t\t\t<Button variant=\"contained\" size=\"small\" onClick={changeTasksFilterHandler('completed')} color={filterCompletedColor}>\n\t\t\t\tCompleted\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\n","import { TodolistDomainType, todolistsThunks } from 'features/todolists-management/model/todolists.slice';\nimport { selectTodolistRemoving } from 'features/todolists-management/model/todolists.selectors';\nimport { EditableSpan } from 'shared/components';\nimport { Delete } from '@mui/icons-material';\nimport { IconButton } from '@mui/material';\nimport { useActions } from 'shared/hooks';\nimport { useSelector } from 'react-redux';\nimport React, { FC } from 'react';\n\ntype Props = {\n\ttodolist: TodolistDomainType;\n};\n\nexport const TodolistTitle: FC<Props> = ({ todolist }) => {\n\tconst { removeTodolist, changeTodolistTitle } = useActions(todolistsThunks);\n\n\tconst loadingList = useSelector(selectTodolistRemoving(todolist.id));\n\n\tconst removeTodolistHandler = () => {\n\t\tremoveTodolist(todolist.id);\n\t};\n\n\tconst changeTodolistTitleCallback = (title: string) => {\n\t\treturn changeTodolistTitle({ id: todolist.id, title }).unwrap();\n\t};\n\n\treturn (\n\t\t<h3 className=\"list-title\">\n\t\t\t<EditableSpan value={todolist.title} onChange={changeTodolistTitleCallback} disabled={loadingList} />\n\t\t\t<IconButton onClick={removeTodolistHandler} disabled={todolist.entityStatus === 'loading'}>\n\t\t\t\t<Delete />\n\t\t\t</IconButton>\n\t\t</h3>\n\t);\n};\n","import { TodolistDomainType } from 'features/todolists-management/model/todolists.slice';\nimport { selectTasks } from 'features/tasks-management/model/tasks.selectors';\nimport { tasksThunks } from 'features/tasks-management/model/tasks.slice';\nimport { FilterTasksButtons } from 'entities/filter-tasks-buttons';\nimport { TodolistTitle } from 'entities/todolist-title';\nimport React, { FC, memo, useCallback } from 'react';\nimport { AddItemForm } from 'shared/components';\nimport { useActions } from 'shared/hooks';\nimport { useSelector } from 'react-redux';\nimport { Tasks } from 'widgets/todolist';\nimport { Paper } from '@mui/material';\n\ntype Props = {\n\ttodolist: TodolistDomainType;\n};\n\nexport const Todolist: FC<Props> = memo(({ todolist }) => {\n\tconst tasks = useSelector(selectTasks)[todolist.id];\n\n\tconst { addTask } = useActions(tasksThunks);\n\n\tconst addTaskCallBack = useCallback((title: string) => {\n\t\treturn addTask({ title, todolistId: todolist.id }).unwrap();\n\t}, []);\n\n\tconst disabled = todolist.entityStatus === 'loading';\n\n\treturn (\n\t\t<div>\n\t\t\t<Paper elevation={2} style={{ padding: '1.5rem 1rem' }}>\n\t\t\t\t<TodolistTitle todolist={todolist} />\n\t\t\t\t<AddItemForm addItem={addTaskCallBack} disabled={disabled} placeholder=\"Enter task title\" className=\"padding-block\" />\n\t\t\t\t<Tasks todolist={todolist} tasks={tasks} />\n\t\t\t\t<div style={{ paddingTop: '10px' }}>\n\t\t\t\t\t<FilterTasksButtons todolist={todolist} />\n\t\t\t\t</div>\n\t\t\t</Paper>\n\t\t</div>\n\t);\n});\n","import { TaskType, UpdateDomainTaskModelType } from 'features/tasks-management/api/tasks.api.types';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport FormControl from '@mui/material/FormControl';\nimport { Button, TextField } from '@mui/material';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport { Modal } from 'shared/components';\nimport { useTask } from '../lib/useTask';\nimport React, { FC } from 'react';\nimport dayjs from 'dayjs';\n\ntype Props = {\n   onClose: () => void;\n   open: boolean;\n   task: TaskType;\n   onSubmit: (values: UpdateDomainTaskModelType) => void;\n};\n\nexport const TaskModal: FC<Props> = ({ onClose, open, task, onSubmit }) => {\n   const { handleSubmit, getFieldProps, setFieldValue, touched, errors } = useTask(task, onSubmit);\n\n   const titleError = !!(touched.title && errors.title);\n   const titleLabel = titleError ? errors.title : 'Task title';\n\n   return (\n      <Modal onClose={onClose} open={open} title={task.title}>\n         <form className=\"task-form\" onSubmit={handleSubmit}>\n            <div className=\"task-form__created\">\n               <span>Creted:</span> <span>{new Date(task.addedDate).toLocaleString()}</span>\n            </div>\n            <TextField label={titleLabel} error={titleError} {...getFieldProps('title')} />\n            <div className=\"task-form__select-group select-group\">\n               <FormControl className=\"select-group__select select\">\n                  <InputLabel id=\"demo-simple-select-label\" className=\"select__label\">\n                     Status\n                  </InputLabel>\n                  <Select labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" {...getFieldProps('status')}>\n                     <MenuItem value={0}>New</MenuItem>\n                     <MenuItem value={1}>In Progress</MenuItem>\n                     <MenuItem value={2}>Completed</MenuItem>\n                     <MenuItem value={3}>Draft</MenuItem>\n                  </Select>\n               </FormControl>\n               <FormControl className=\"select-group__select select\">\n                  <InputLabel id=\"priority-select-label\" className=\"select__label\">\n                     Priority\n                  </InputLabel>\n                  <Select labelId=\"priority-select-label\" id=\"priority-select\" {...getFieldProps('priority')}>\n                     <MenuItem value={0}>Low</MenuItem>\n                     <MenuItem value={1}>Middle</MenuItem>\n                     <MenuItem value={2}>Hight</MenuItem>\n                     <MenuItem value={3}>Urgently</MenuItem>\n                     <MenuItem value={4}>Later</MenuItem>\n                  </Select>\n               </FormControl>\n            </div>\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\n               <DemoContainer components={['DatePicker', 'DatePicker']}>\n                  <div className=\"task-form__dates dates\">\n                     <DatePicker\n                        label=\"Start date\"\n                        className=\"dates__start\"\n                        {...getFieldProps('startDate')}\n                        onChange={(value) => {\n                           setFieldValue('startDate', dayjs(new Date(value)));\n                        }}\n                     />\n                     <DatePicker\n                        label=\"Deadline\"\n                        className=\"dates__deadline\"\n                        {...getFieldProps('deadline')}\n                        onChange={(value) => {\n                           setFieldValue('deadline', dayjs(new Date(value)));\n                        }}\n                     />\n                  </div>\n               </DemoContainer>\n            </LocalizationProvider>\n            <TextField label=\"Description\" multiline {...getFieldProps('description')} />\n            <div className=\"task-form__buttons\">\n               <Button variant=\"contained\" color=\"inherit\" onClick={onClose}>\n                  Cancel\n               </Button>\n               <Button variant=\"contained\" type=\"submit\">\n                  Apply\n               </Button>\n            </div>\n         </form>\n      </Modal>\n   );\n};\n","import { TaskResponseType, TaskType, UpdateDomainTaskModelType } from 'features/tasks-management/api/tasks.api.types';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { useFormik } from 'formik';\n\ntype TaskForm = Pick<TaskResponseType, 'title' | 'status' | 'priority' | 'description'> & {\n   startDate: Dayjs | null;\n   deadline: Dayjs | null;\n};\n\ntype FormikErrorType = Partial<Pick<TaskForm, 'title'>>;\n\nexport const useTask = (task: TaskType, onSubmit: (values: UpdateDomainTaskModelType) => void) => {\n   return useFormik<TaskForm>({\n      initialValues: {\n         title: task.title,\n         status: task.status,\n         priority: task.priority,\n         startDate: task.startDate ? dayjs(new Date(task.startDate)) : null,\n         deadline: task.deadline ? dayjs(new Date(task.deadline)) : null,\n         description: task.description ?? '',\n      },\n      validate: (values) => {\n         const errors: FormikErrorType = {};\n         if (!values.title.length) {\n            errors.title = 'Field is required';\n         }\n         return errors;\n      },\n      onSubmit: (values) => {\n         const toUpdate: UpdateDomainTaskModelType = {\n            title: values.title,\n            status: values.status,\n            priority: values.priority,\n            startDate: values.startDate?.toISOString(),\n            deadline: values.deadline?.toISOString(),\n            description: values.description,\n         };\n\n         onSubmit(toUpdate);\n      },\n   });\n};\n","import { selectTodolistRemoving } from 'features/todolists-management/model/todolists.selectors';\nimport { tasksThunks } from 'features/tasks-management/model/tasks.slice';\nimport { TaskType, UpdateDomainTaskModelType } from 'features/tasks-management/api/tasks.api.types';\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\nimport React, { ChangeEvent, FC, memo, useState } from 'react';\nimport IconButton from '@mui/material/IconButton';\nimport Checkbox from '@mui/material/Checkbox';\nimport { TaskStatuses } from 'shared/enums';\nimport { useActions, useAppDispatch } from 'shared/hooks';\nimport { useSelector } from 'react-redux';\nimport { TaskModal } from 'widgets/task-modal';\nimport { handleServerNetworkError } from 'shared/utils';\n\ntype Props = {\n   task: TaskType;\n   todolistId: string;\n};\n\nexport const Task: FC<Props> = memo(({ task, todolistId }) => {\n   const dispatch = useAppDispatch();\n\n   const loadingList = useSelector(selectTodolistRemoving(todolistId));\n\n   const { removeTask, updateTask } = useActions(tasksThunks);\n\n   const [open, setOpen] = useState(false);\n\n   const removeTaskHandler = () => {\n      removeTask({ taskId: task.id, todolistId });\n   };\n\n   const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      let newIsDoneValue = e.currentTarget.checked;\n      const status = newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New;\n      updateTask({ taskId: task.id, domainModel: { status }, todolistId });\n   };\n\n   const disabledTerms = loadingList || task.loading;\n\n   const taskDone = task.status === TaskStatuses.Completed;\n\n   const onSubmit = async (values: UpdateDomainTaskModelType) => {\n      try {\n         await updateTask({ taskId: task.id, domainModel: values, todolistId }).unwrap();\n         setOpen(false);\n      } catch (error) {\n         handleServerNetworkError(error, dispatch);\n      }\n   };\n\n   return (\n      <div className=\"task\">\n         <TaskModal open={open} onClose={() => setOpen(false)} task={task} onSubmit={onSubmit} />\n         <Checkbox checked={taskDone} color=\"primary\" onChange={changeStatusHandler} disabled={disabledTerms} />\n         <div className=\"task-with-icon\">\n            <p className=\"editable-span\" onClick={() => setOpen(true)}>\n               {task.title}\n            </p>\n            <IconButton onClick={removeTaskHandler} disabled={disabledTerms}>\n               <RemoveCircleIcon style={{ opacity: '0.4' }} />\n            </IconButton>\n         </div>\n      </div>\n   );\n});\n","import { TodolistDomainType } from 'features/todolists-management/model/todolists.slice';\nimport { TaskType } from 'features/tasks-management/api/tasks.api.types';\nimport { TaskStatuses } from 'shared/enums';\nimport { Task } from 'entities/task';\nimport { FC } from 'react';\nimport React from 'react';\n\ntype Props = {\n\ttodolist: TodolistDomainType;\n\ttasks: TaskType[];\n};\n\nexport const Tasks: FC<Props> = ({ tasks, todolist }) => {\n\tlet tasksForTodolist = tasks;\n\n\tif (todolist.filter === 'active') {\n\t\ttasksForTodolist = tasks.filter((t) => t.status === TaskStatuses.New);\n\t}\n\n\tif (todolist.filter === 'completed') {\n\t\ttasksForTodolist = tasks.filter((t) => t.status === TaskStatuses.Completed);\n\t}\n\n\treturn (\n\t\t<div className=\"task-list\">\n\t\t\t{tasksForTodolist.length ? (\n\t\t\t\ttasksForTodolist.map((t) => <Task key={t.id} task={t} todolistId={todolist.id} />)\n\t\t\t) : (\n\t\t\t\t<p className=\"no-task\">No tasks yet...</p>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n","import { selectTodolists } from 'features/todolists-management/model/todolists.selectors';\nimport { todolistsThunks } from 'features/todolists-management/model/todolists.slice';\nimport { Todolist } from 'widgets/todolist';\nimport { useActions } from 'shared/hooks';\nimport { useSelector } from 'react-redux';\nimport React, { useEffect } from 'react';\n\nconst Main = () => {\n\tconst todolists = useSelector(selectTodolists);\n\n\tconst { fetchTodolists } = useActions(todolistsThunks);\n\n\tuseEffect(() => {\n\t\tfetchTodolists();\n\t}, []);\n\n\treturn (\n\t\t<div className=\"lists-container\">\n\t\t\t{todolists?.map((tl) => (\n\t\t\t\t<Todolist key={tl.id} todolist={tl} />\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default Main;\n"],"names":["selectTodolists","state","todolists","selectTodolistRemoving","id","find","list","entityStatus","selectTasks","tasks","FilterTasksButtons","_ref","todolist","changeTodolistFilter","useActions","todolistsActions","changeTasksFilterHandler","filter","filterAllColor","filterActiveColor","filterCompletedColor","_jsxs","className","children","_jsx","Button","variant","size","onClick","color","TodolistTitle","_useActions","todolistsThunks","removeTodolist","changeTodolistTitle","loadingList","useSelector","EditableSpan","value","title","onChange","unwrap","disabled","IconButton","Delete","Todolist","memo","addTask","tasksThunks","addTaskCallBack","useCallback","todolistId","Paper","elevation","style","padding","AddItemForm","addItem","placeholder","Tasks","paddingTop","TaskModal","onClose","open","task","_useTask","onSubmit","_task$description","useFormik","initialValues","status","priority","startDate","dayjs","Date","deadline","description","validate","values","errors","length","_values$startDate","_values$deadline","toUpdate","toISOString","useTask","handleSubmit","getFieldProps","setFieldValue","touched","titleError","titleLabel","Modal","addedDate","toLocaleString","TextField","_objectSpread","label","error","FormControl","InputLabel","Select","labelId","MenuItem","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","components","DatePicker","multiline","type","Task","dispatch","useAppDispatch","removeTask","updateTask","_useState","useState","_useState2","_slicedToArray","setOpen","disabledTerms","loading","taskDone","TaskStatuses","Completed","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","taskId","domainModel","t0","handleServerNetworkError","stop","_x","apply","arguments","Checkbox","checked","e","currentTarget","New","RemoveCircleIcon","opacity","tasksForTodolist","t","map","fetchTodolists","useEffect","tl"],"sourceRoot":""}